scalar DateTime

union TrackChange = User | Credentials

type Credentials {
  updatedAt: DateTime!
  email: String!
  hash: String!
}

type User {
  id: ID!
  email: String!
  hash: String!
  hashRt: String
  createdAt: DateTime!
}

input CreateUserInput {
  email: String!
  hash: String!
  createdAt: DateTime
}

input SigninUser {
  email: String!
  password: String!
}

type SigninPayload {
  access_token: String!
  refresh_token: String!
}

type SignoutPayload {
  message: String!
}

type RefreshTokenPayload {
  accessToken: String!
}

type AuthPayload {
  access_token: String!
  refresh_token: String!
}

type Query {
  user(id: ID!): User
  users: [TrackChange]!
}

type Mutation {
  signinUser(signinUser: SigninUser!): SigninPayload!
  signoutUser: SignoutPayload!
  refreshToken: AuthPayload!
  createUser(createUserInput: CreateUserInput!): User!
}
